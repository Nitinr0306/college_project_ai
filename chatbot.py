import json
import requests
import logging
import os
import random

logger = logging.getLogger(__name__)

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger.setLevel(logging.DEBUG)

# Ollama API endpoint - configurable via environment variables
OLLAMA_API_HOST = os.environ.get('OLLAMA_API_HOST', 'localhost')
OLLAMA_API_PORT = os.environ.get('OLLAMA_API_PORT', '11434')
OLLAMA_API_URL = f"http://{OLLAMA_API_HOST}:{OLLAMA_API_PORT}/api/generate"

logger.debug(f"Configured Ollama API URL: {OLLAMA_API_URL}")

# Pre-defined sustainability tips and responses
SUSTAINABILITY_TIPS = [
    "Try reducing your meat consumption. Even cutting back one day a week can significantly lower your carbon footprint.",
    "Consider using public transportation, carpooling, biking, or walking instead of driving alone to reduce emissions.",
    "Unplug electronics when not in use. Even in standby mode, they consume energy.",
    "Conserve water by taking shorter showers, fixing leaks, and turning off the tap when brushing teeth.",
    "Choose reusable items over single-use products like water bottles, shopping bags, and food containers.",
    "Wash clothes in cold water and hang them to dry when possible instead of using a dryer.",
    "Support local farmers and eat seasonal produce to reduce the carbon footprint of your food.",
    "Reduce food waste by planning meals, properly storing food, and composting scraps.",
    "Invest in energy-efficient appliances with high Energy Star ratings when replacements are needed.",
    "Consider adding more plant-based meals to your diet - they typically have a much lower carbon footprint.",
    "Opt for digital documents, bills, and communications instead of paper whenever possible.",
    "Start composting food scraps and yard waste to reduce landfill methane emissions.",
    "Adjust your thermostat settings to use less heating and cooling when you're away or sleeping.",
    "Purchase carbon offsets for unavoidable emissions from travel or other activities.",
    "Support renewable energy by choosing green power options from your utility provider if available."
]

CARBON_FOOTPRINT_INFO = [
    "A carbon footprint is the total amount of greenhouse gases (including carbon dioxide and methane) generated by our actions.",
    "The average person in the United States produces about 16 tons of carbon dioxide equivalent each year.",
    "Transportation, housing, and food typically make up the largest portions of an individual's carbon footprint.",
    "Beef production has one of the highest carbon footprints of any food, producing about 60 kg of greenhouse gases per kg of meat.",
    "Flying generates significant emissions - a round-trip flight from New York to London produces about 1.6 tons of CO2 per passenger.",
    "Electricity generation is a major source of carbon emissions, especially in regions that rely heavily on coal or natural gas.",
    "The global average carbon footprint is about 4.8 tons of CO2 per person annually, with significant variation by country.",
    "To limit global warming to 1.5째C, the average global carbon footprint needs to drop to about 2 tons per person by 2050.",
    "Working from home can significantly reduce your carbon footprint by eliminating commuting emissions.",
    "Home heating and cooling typically account for about 40% of home energy use in temperate climates."
]

CLIMATE_CHANGE_FACTS = [
    "The Earth's average temperature has increased by about 1.1째C since the pre-industrial era.",
    "The last decade (2011-2020) was the warmest on record according to NASA and NOAA data.",
    "Rising sea levels threaten coastal communities worldwide, with projections of 0.3-2.5 meters of rise by 2100.",
    "Climate change is increasing the frequency and intensity of extreme weather events like hurricanes, droughts, and wildfires.",
    "Arctic sea ice is declining at a rate of about 13% per decade, affecting global weather patterns and ecosystems.",
    "Ocean acidification, caused by absorption of CO2, threatens marine life including coral reefs and shellfish.",
    "About 1 million animal and plant species are now threatened with extinction, many within decades, due to climate change and other human activities.",
    "The Paris Agreement aims to limit global warming to well below 2째C, preferably to 1.5째C, compared to pre-industrial levels.",
    "Renewable energy sources like solar and wind have become increasingly cost-competitive with fossil fuels.",
    "Deforestation contributes to climate change by reducing carbon sequestration and releasing stored carbon."
]

def get_chatbot_response(user_message):
    """
    Get a response about sustainability topics. Tries to use Ollama/Llama2 if available,
    falls back to pre-defined responses if the API is unavailable.
    
    Args:
        user_message: The message sent by the user
        
    Returns:
        A response about sustainability
    """
    # Try to get a response from Ollama API
    try:
        # Create a prompt focused on sustainability
        prompt = f"""You are a helpful sustainability assistant focused on providing information about 
        carbon footprints, climate change, and environmental topics. 
        
        User query: {user_message}
        
        Please provide an informative, accurate, and helpful response about this environmental topic.
        Keep your answer concise, clear, and focused on sustainability.
        """
        
        # Prepare the payload for Ollama API
        payload = {
            "model": "llama2",
            "prompt": prompt,
            "stream": False
        }
        
        logger.debug(f"Sending request to Ollama API at {OLLAMA_API_URL}")
        
        # Add headers for JSON content
        headers = {
            'Content-Type': 'application/json'
        }
        
        # Make a request to the Ollama API with a timeout
        response = requests.post(OLLAMA_API_URL, json=payload, headers=headers, timeout=15)
        
        # Log the full response for debugging
        logger.debug(f"Ollama API response status: {response.status_code}")
        logger.debug(f"Ollama API response headers: {response.headers}")
        
        # Check if request was successful
        if response.status_code == 200:
            try:
                response_data = response.json()
                logger.debug(f"Ollama response JSON: {json.dumps(response_data)[:200]}...")
                
                # Extract the response based on the format
                if 'response' in response_data:
                    bot_response = response_data.get('response', '')
                    logger.info(f"Successfully got Ollama response (format 1)")
                    return bot_response
                else:
                    logger.warning(f"Unknown Ollama response format: {list(response_data.keys())}")
            except json.JSONDecodeError:
                logger.error(f"Failed to parse JSON from Ollama response: {response.text[:200]}...")
        else:
            logger.warning(f"Ollama API returned non-200 status code: {response.status_code}")
            logger.warning(f"Response content: {response.text[:200]}...")
                
    except requests.exceptions.RequestException as e:
        logger.warning(f"Could not connect to Ollama API: {str(e)}")
        
    except Exception as e:
        logger.warning(f"Error in Ollama API interaction: {str(e)}")
    
    # If we reach here, API attempts failed - log that we're switching to fallback responses
    logger.info(f"Ollama API connection failed, using fallback response system for query: {user_message}")
    
    # Improved fallback response system with better natural language understanding
    user_message_lower = user_message.lower()
    
    # More comprehensive keyword mapping with prioritized matching
    keywords_mapping = {
        'tip': ('tips', SUSTAINABILITY_TIPS, "Here's a sustainability tip that might help: "),
        'idea': ('tips', SUSTAINABILITY_TIPS, "Here's an eco-friendly idea to consider: "),
        'suggestion': ('tips', SUSTAINABILITY_TIPS, "I'd suggest this sustainable practice: "),
        'how can i': ('tips', SUSTAINABILITY_TIPS, "You can make a difference by: "),
        'how to': ('tips', SUSTAINABILITY_TIPS, "Here's how you can help the environment: "),
        'ways to': ('tips', SUSTAINABILITY_TIPS, "One effective way to be more sustainable is: "),
        'reduce': ('tips', SUSTAINABILITY_TIPS, "To reduce your environmental impact, try this: "),
        
        'carbon': ('footprint', CARBON_FOOTPRINT_INFO, "Regarding carbon footprints: "),
        'footprint': ('footprint', CARBON_FOOTPRINT_INFO, "Here's an important fact about carbon footprints: "),
        'emission': ('footprint', CARBON_FOOTPRINT_INFO, "About emissions and their impact: "),
        'co2': ('footprint', CARBON_FOOTPRINT_INFO, "Did you know this about CO2 and carbon footprints? "),
        'greenhouse': ('footprint', CARBON_FOOTPRINT_INFO, "About greenhouse gases: "),
        
        'climate': ('climate', CLIMATE_CHANGE_FACTS, "About climate change: "),
        'global warming': ('climate', CLIMATE_CHANGE_FACTS, "Regarding global warming: "),
        'weather': ('climate', CLIMATE_CHANGE_FACTS, "Climate change is affecting weather patterns: "),
        'temperature': ('climate', CLIMATE_CHANGE_FACTS, "Temperature changes and climate facts: "),
        'sea level': ('climate', CLIMATE_CHANGE_FACTS, "Concerning sea level rise: "),
        'extreme': ('climate', CLIMATE_CHANGE_FACTS, "About extreme weather and climate change: ")
    }
    
    # First look for exact matches in the mapping
    for keyword, (category, responses, prefix) in keywords_mapping.items():
        if keyword in user_message_lower:
            return f"{prefix}{random.choice(responses)}"
    
    # Handle specific question types with appropriate responses
    if any(q in user_message_lower for q in ["what is", "how does", "why is", "can you explain"]):
        if any(topic in user_message_lower for topic in ["carbon footprint", "emissions", "greenhouse"]):
            return f"I couldn't connect to Llama2, but I can tell you that {random.choice(CARBON_FOOTPRINT_INFO)}"
        elif any(topic in user_message_lower for topic in ["climate change", "global warming", "sustainability"]):
            return f"While I'm unable to access Llama2 right now, I can share that {random.choice(CLIMATE_CHANGE_FACTS)}"
    
    # More personalized general responses
    if "hello" in user_message_lower or "hi" in user_message_lower.split():
        return "Hello! I'm your Eco-Assistant. I'm having trouble connecting to Llama2 at the moment, but I can still help with sustainability information. What would you like to know about reducing your environmental impact?"
    
    if "thank" in user_message_lower:
        return "You're welcome! I'm happy to help with sustainability topics. Feel free to ask more questions!"
    
    if len(user_message_lower) < 10:
        return "I need a bit more information to help you. Could you please ask a more specific question about sustainability, carbon footprints, or climate change?"
    
    # Enhanced general fallback responses
    general_responses = [
        f"I couldn't connect to Llama2, but I can share this sustainability tip: {random.choice(SUSTAINABILITY_TIPS)}",
        f"While I'm having trouble accessing Llama2, here's an interesting fact about climate change: {random.choice(CLIMATE_CHANGE_FACTS)}",
        f"I'm currently unable to use Llama2, but did you know this about carbon footprints? {random.choice(CARBON_FOOTPRINT_INFO)}",
        "I'm having trouble connecting to Llama2 at the moment. I can provide basic information about sustainability, carbon footprints, and climate change. What specific area are you interested in?",
        f"Though I can't access Llama2 right now, I can tell you that {random.choice(SUSTAINABILITY_TIPS)}"
    ]
    return random.choice(general_responses)
