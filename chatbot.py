import json
import requests
import logging
import os
import random

logger = logging.getLogger(__name__)

# Ollama API endpoint - configurable via environment variables
OLLAMA_API_HOST = os.environ.get('OLLAMA_API_HOST', 'localhost')
OLLAMA_API_PORT = os.environ.get('OLLAMA_API_PORT', '11434')
OLLAMA_API_URL = f"http://{OLLAMA_API_HOST}:{OLLAMA_API_PORT}/api/generate"

logger.debug(f"Using Ollama API URL: {OLLAMA_API_URL}")

# Pre-defined sustainability tips and responses
SUSTAINABILITY_TIPS = [
    "Try reducing your meat consumption. Even cutting back one day a week can significantly lower your carbon footprint.",
    "Consider using public transportation, carpooling, biking, or walking instead of driving alone to reduce emissions.",
    "Unplug electronics when not in use. Even in standby mode, they consume energy.",
    "Conserve water by taking shorter showers, fixing leaks, and turning off the tap when brushing teeth.",
    "Choose reusable items over single-use products like water bottles, shopping bags, and food containers.",
    "Wash clothes in cold water and hang them to dry when possible instead of using a dryer.",
    "Support local farmers and eat seasonal produce to reduce the carbon footprint of your food.",
    "Reduce food waste by planning meals, properly storing food, and composting scraps.",
    "Invest in energy-efficient appliances with high Energy Star ratings when replacements are needed.",
    "Consider adding more plant-based meals to your diet - they typically have a much lower carbon footprint.",
    "Opt for digital documents, bills, and communications instead of paper whenever possible.",
    "Start composting food scraps and yard waste to reduce landfill methane emissions.",
    "Adjust your thermostat settings to use less heating and cooling when you're away or sleeping.",
    "Purchase carbon offsets for unavoidable emissions from travel or other activities.",
    "Support renewable energy by choosing green power options from your utility provider if available."
]

CARBON_FOOTPRINT_INFO = [
    "A carbon footprint is the total amount of greenhouse gases (including carbon dioxide and methane) generated by our actions.",
    "The average person in the United States produces about 16 tons of carbon dioxide equivalent each year.",
    "Transportation, housing, and food typically make up the largest portions of an individual's carbon footprint.",
    "Beef production has one of the highest carbon footprints of any food, producing about 60 kg of greenhouse gases per kg of meat.",
    "Flying generates significant emissions - a round-trip flight from New York to London produces about 1.6 tons of CO2 per passenger.",
    "Electricity generation is a major source of carbon emissions, especially in regions that rely heavily on coal or natural gas.",
    "The global average carbon footprint is about 4.8 tons of CO2 per person annually, with significant variation by country.",
    "To limit global warming to 1.5째C, the average global carbon footprint needs to drop to about 2 tons per person by 2050.",
    "Working from home can significantly reduce your carbon footprint by eliminating commuting emissions.",
    "Home heating and cooling typically account for about 40% of home energy use in temperate climates."
]

CLIMATE_CHANGE_FACTS = [
    "The Earth's average temperature has increased by about 1.1째C since the pre-industrial era.",
    "The last decade (2011-2020) was the warmest on record according to NASA and NOAA data.",
    "Rising sea levels threaten coastal communities worldwide, with projections of 0.3-2.5 meters of rise by 2100.",
    "Climate change is increasing the frequency and intensity of extreme weather events like hurricanes, droughts, and wildfires.",
    "Arctic sea ice is declining at a rate of about 13% per decade, affecting global weather patterns and ecosystems.",
    "Ocean acidification, caused by absorption of CO2, threatens marine life including coral reefs and shellfish.",
    "About 1 million animal and plant species are now threatened with extinction, many within decades, due to climate change and other human activities.",
    "The Paris Agreement aims to limit global warming to well below 2째C, preferably to 1.5째C, compared to pre-industrial levels.",
    "Renewable energy sources like solar and wind have become increasingly cost-competitive with fossil fuels.",
    "Deforestation contributes to climate change by reducing carbon sequestration and releasing stored carbon."
]

def get_chatbot_response(user_message):
    """
    Get a response about sustainability topics. Tries to use Ollama/Llama2 if available,
    falls back to pre-defined responses if the API is unavailable.
    
    Args:
        user_message: The message sent by the user
        
    Returns:
        A response about sustainability
    """
    # First, try to get a response from Ollama API
    try:
        # Create a prompt focused on sustainability
        prompt = f"""You are a helpful sustainability assistant focused on providing information about 
        carbon footprints, climate change, and environmental topics. 
        
        User query: {user_message}
        
        Please provide an informative, accurate, and helpful response about this environmental topic.
        Keep your answer concise, clear, and focused on sustainability.
        """
        
        # Prepare the payload for Ollama API
        payload = {
            "model": "llama2",
            "prompt": prompt,
            "stream": False
        }
        
        logger.debug(f"Sending request to Ollama API with message: {user_message}")
        
        # Make a request to the Ollama API with a shorter timeout
        response = requests.post(OLLAMA_API_URL, json=payload, timeout=5)
        
        # Check if request was successful
        if response.status_code == 200:
            response_data = response.json()
            bot_response = response_data.get('response', '')
            logger.debug(f"Received response from Ollama: {bot_response[:50]}...")
            return bot_response
    
    except requests.exceptions.RequestException as e:
        logger.warning(f"Could not connect to Ollama API: {str(e)}")
        # Continue to fallback responses
        
    except Exception as e:
        logger.warning(f"Error in Ollama response: {str(e)}")
        # Continue to fallback responses
    
    # Fallback to pre-defined responses based on keywords in the user's message
    user_message_lower = user_message.lower()
    
    # Check for tip-related queries
    if any(word in user_message_lower for word in ['tip', 'idea', 'suggestion', 'how can i', 'how to', 'ways to']):
        return f"Here's a sustainability tip you might find helpful: {random.choice(SUSTAINABILITY_TIPS)}"
    
    # Check for carbon footprint queries
    elif any(word in user_message_lower for word in ['carbon', 'footprint', 'emission', 'co2']):
        return f"Regarding carbon footprints: {random.choice(CARBON_FOOTPRINT_INFO)}"
    
    # Check for climate change queries
    elif any(word in user_message_lower for word in ['climate', 'global warming', 'weather', 'temperature']):
        return f"About climate change: {random.choice(CLIMATE_CHANGE_FACTS)}"
    
    # General fallback response
    else:
        general_responses = [
            f"As a sustainability assistant, I'd like to share this tip: {random.choice(SUSTAINABILITY_TIPS)}",
            f"While I don't have a specific answer to that, here's an interesting fact about climate change: {random.choice(CLIMATE_CHANGE_FACTS)}",
            f"I'm not sure about that specific question, but did you know? {random.choice(CARBON_FOOTPRINT_INFO)}",
            "I'm currently running in offline mode. For more specific information, please try again later when the Llama2 model is available."
        ]
        return random.choice(general_responses)
